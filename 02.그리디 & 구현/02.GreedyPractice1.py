"""
 어떠한 수 N 이 1이 될 때 까지 다음의 두 과정 중 하나를 반복적으로 선택하여 수행하려고 합니다.
 단, 두 번째 연산은 N 이 K 로 나누어 떨어질 때만 선택할 수 있습니다.

 1. N 에서 1 을 뺍니다.
 2. N 을 K 로 나눕니다.

 예를 들어 N = 17, K = 4 라고 가정합시다. 이 때 1번의 과정을 한 번 수행하면 N 은 16이 됩니다.
 이후에 2번 과정을 두 번 수행하면 N 은 1이 됩니다. 결과적으로 이 경우 전체 과정을 실행한 횟수가 3이 되고,
 이는 N 을 1로 만드는 최소 횟수입니다.

 N 과 K 가 주어질 때 N 이 1이 될 때 까지 1번 혹은 2번 과정을 수행해야 하는 최소 횟수를 구하는 프로그램을 작성하세요

 [입력 조건] 첫째 줄에 N (1<=N<=100,000) 과 K (2<=K<=100,000) 가 공백을 기준으로 하여 각각 자연수로 주어집니다.
 [출력 조건] 첫째 줄에 N 이 1이 될 때까지 1번 혹은 2번 과정을 수행해야 하는 횟수의 최솟값을 출력합니다.

 [입력 예시] 25 5
 [출력 예시] 2

"""

n, k = map(int, input().split())
count = 0
while n != 1:
    if n % k == 0:
        n /= k
        count += 1
    else:
        n -= 1
        count += 1

print(count)

"""

 [정당성 분석]

 1. N 이 아무리 큰 수여도 K 로 계속 나눈다면 기하급수적으로 빠르게 1로 도달할 수 있음
 2. K 가 2 이상의 수인 것이 보장되었으므로 무조건 1을 빼는 동작보다 빠르게 1로 도달할 수 있음
 
"""

# 더 나은 시간 복잡도 O(logN) 로 구현한 알고리즘

n, k = map(int, input().split())
count = 0

while True:
    # N 이 K 로 나누어 떨어지는 수가 될 때까지 빼기
    target = (n // k) * k  # n 이 k 로 나누어 떨어지지 않을 때, 가장 가까운 k 로 나누어 떨어지는 수 찾기
    count += (n - target)
    n = target

    # N 이 K 보다 작을 때 ( 더 이상 나눌 수 없을 때 ) 탈출
    if n < k:
        break

    # K 로 나누기
    count += 1
    n //= k

# 마지막 남은 수에 대하여 1 빼기
count += (n - 1)
print(count)