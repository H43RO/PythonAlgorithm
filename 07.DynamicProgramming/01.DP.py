# 피보나치를 재귀함수로 구현한다면

def fibo(x):
    if x == 1 or x == 2:
        return 1
    return fibo(x - 1) + fibo(x - 2)


print(fibo(4))

# 하지만 재귀함수로 구현한다면 중복 연산이 많이 일어나게 됨.
# 또한 연산량이 많은 만큼 시간복잡도가 상당히 높아지게 됨.
# (100 번째 피보나치를 구한다해도 연산이 이루어지지 않음)

# 큰 문제를 해결하기 위해 작은 문제를 모아서 해결할 수 있음 -> 최적 부분 구조
# 동일한 작은 문제를 반복적으로 해결하기 때문에 DP 를 사용하기 적합

# 한 번 계산된 결과를 메모이제이션 하기 위한 리스트 초기화
d = [0] * 100


# 피보나치 함수를 재귀함수로 구현 (탑다운 다이나믹 프로그래밍)

def fibo(x):
    if x == 1 or x == 2:
        return 1
    # 이미 계산한 적 있는 문제라면 메모해두었 계산 결과 바로 반환
    if d[x] != 0:
        return d[x]
    d[x] = fibo(x - 1) + fibo(x - 2)
    return d[x]


print(fibo(99))


# 피보나치 함수를 반복문으로 구현 (바텀업 다이나믹 프로그래밍)

d = [0] * 100
d[1] = 1
d[2] = 1

n = 99

for i in range(3, n + 1):
    d[i] = d[i - 1] + d[i - 2]

print(d[n])
