"""
    [핵심 아이디어]
    사용할 수 있는 동전 세트를 하나씩 늘려가면서 루프를 돌아줌
    루프마다 사용 가능한 동전을 '모두' 사용하여 특정 수를 만들 수 있는 경우의 수를 더해주면
    (루프마다 사용 가능한 동전을 모두 사용해야 경우의 수 중복에 대한 오류를 제거할 수 있음)
    최종적으로 K 를 만들 수 있는 모든 경우의 수를 뽑아낼 수 있음 (경우의 수 누적 형식)
"""

from sys import stdin

n, k = map(int, stdin.readline().split())
dp = [0] * (k + 1)
dp[0] = 1  # 0원을 만드는 경우는 동전을 아무것도 선택하지 않는 경우 1가지

coin = [int(stdin.readline()) for _ in range(n)]

for x in coin:  # 사용할 수 있는 동전을 하나씩 늘려가며 DP 테이블 갱신
    for i in range(x, k + 1):  # 사용 가능한 동전이 1 ... X 원이면 최소 X 원부터 탐색해야 함 (당연)
        dp[i] += dp[i - x]  # 탐색하고 있는 가격에서 X 원을 뺀 가격의 DP 값을 더해주기만 하면 됨
print(dp[k])

"""
    X 원 뺀 가격을 만들 수 있는 모든 경우의 수에 X 원씩 덧붙인 값이 X 원을 만들기 위한 모든 경우의 수 니까 ㅇㅇ ㅋㅋ
    
    ex) 동전 1, 2가 사용가능한 루프에서 현재 5원을 만드는 경우의 수를 살펴볼 때, 
    5에서 2를 뺀 '3'을 만드는 경우의 수가 2 (1+1+1, 1+2) 니까 (같은 방식으로 DP 테이블에 이미 저장됨)
    이 두 가지 경우 각각에 2를 더해주는게 결국 모든 경우의 수다. (1+1+1 +2, 1+2 +2)
"""
